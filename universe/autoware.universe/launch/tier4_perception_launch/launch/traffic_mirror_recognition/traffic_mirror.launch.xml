<?xml version="1.0"?>
<launch>
  <arg name="enable_image_decompressor" default="true" description="enable image decompressor"/>
  <arg name="enable_fine_detection" default="true" description="enable fine position adjustment of traffic mirror"/>
  <arg name="fusion_only" default="false" description="launch only occlusion_predictor and multi_camera_fusion"/>
  <arg name="traffic_mirror_fine_detector_model_path" default="$(find-pkg-share traffic_mirror_fine_detector)/data" description="fine detector label path"/>
  <arg name="traffic_mirror_fine_detector_label_name" default="tmr_labels.txt" description="fine detector label filename"/>
  <arg name="traffic_mirror_fine_detector_model_name" default="yolox_tmr" description="fine detector onnx model filename"/>

  <arg name="input/cloud" default="/sensing/lidar/top/pointcloud_raw" description="point cloud for occlusion prediction"/>
  <!-- <arg name="internal/traffic_signals" default="/perception/traffic_mirror_recognition/internal/traffic_signals"/> -->
  <!-- <arg name="fusion/traffic_signals" default="/perception/traffic_mirror_recognition/fusion/traffic_signals"/> -->
  <!-- <arg name="external/traffic_signals" default="/perception/traffic_mirror_recognition/external/traffic_signals"/> -->
  <!-- <arg name="output/traffic_signals" default="/perception/traffic_mirror_recognition/traffic_signals"/> -->
  <!-- <arg name="use_crosswalk_traffic_mirror_estimator" default="true" description="output pedestrian's traffic mirror signals"/> -->
  <!-- <arg name="crosswalk_traffic_mirror_estimator_param_file" default="$(find-pkg-share crosswalk_traffic_mirror_estimator)/config/crosswalk_traffic_mirror_estimator.param.yaml"/> -->
  <arg name="image_number" default="1" description="choose image raw number(1-2)"/>
  <arg name="namespace1" default="traffic_light"/> <!-- namespace1 camera6 -->
  <arg name="namespace2" default="camera7"/>
  <let name="all_camera_namespaces" value="[$(var namespace1)]" if="$(eval '$(var image_number) == 1')"/>
  <let name="all_camera_namespaces" value="[$(var namespace1), $(var namespace2)]" if="$(eval '$(var image_number) >= 2')"/>

  <arg name="fine_detector_label_path" default="$(var traffic_mirror_fine_detector_model_path)/$(var traffic_mirror_fine_detector_label_name)"/>
  <arg name="fine_detector_model_path" default="$(var traffic_mirror_fine_detector_model_path)/$(var traffic_mirror_fine_detector_model_name).onnx"/>


  <!-- namespace1 camera TMR pipeline -->
  <group>
    <push-ros-namespace namespace="traffic_mirror"/> <!--$(var namespace1), KMS_250407-->
    <let name="input/image" value="/sensing/camera/traffic_light/image_raw"/>
    <let name="input/camera_info" value="/sensing/camera/traffic_light/camera_info"/>
    <let name="output/rois1" value="/perception/traffic_mirror_recognition/traffic_mirror/detection/rois"/>
    <let name="output/traffic_signals1" value="/perception/traffic_mirror_recognition/traffic_mirror/classification/traffic_signals"/>
    <let name="map_based_detector_output_topic" value="rough/rois" if="$(var enable_fine_detection)"/>
    <let name="map_based_detector_output_topic" value="$(var output/rois1)" unless="$(var enable_fine_detection)"/>

    <group unless="$(var fusion_only)">
      <node pkg="topic_tools" exec="relay" name="traffic_mirror_camera_info_relay" args="$(var input/camera_info) camera_info"/>
      <group>
        <push-ros-namespace namespace="detection"/>
        <include file="$(find-pkg-share traffic_mirror_map_based_detector)/launch/traffic_mirror_map_based_detector.launch.xml">
          <arg name="input/camera_info" value="$(var input/camera_info)"/>
          <arg name="min_timestamp_offset" value="-0.3"/>
          <arg name="expect/rois" value="expect/rois"/>
          <arg name="output/rois" value="$(var map_based_detector_output_topic)"/>
          <arg name="output/camera_info" value="camera_info"/>
        </include>
      </group>

      <include file="$(find-pkg-share tier4_perception_launch)/launch/traffic_mirror_recognition/traffic_mirror_node_container.launch.py">
        <arg name="input/image" value="$(var input/image)"/>
        <arg name="enable_image_decompressor" value="$(var enable_image_decompressor)"/>
        <arg name="enable_fine_detection" value="$(var enable_fine_detection)"/>
        <!-- <arg name="use_crosswalk_traffic_mirror_estimator" value="$(var use_crosswalk_traffic_mirror_estimator)"/> -->
        <arg name="use_intra_process" value="true"/>
        <arg name="use_multithread" value="true"/>
        <arg name="fine_detector_label_path" value="$(var fine_detector_label_path)"/>
        <arg name="fine_detector_model_path" value="$(var fine_detector_model_path)"/>

        <arg name="output/rois" value="$(var output/rois1)"/>
        <arg name="output/traffic_signals" value="$(var output/traffic_signals1)"/>
      </include>
    </group>
  </group>

</launch>